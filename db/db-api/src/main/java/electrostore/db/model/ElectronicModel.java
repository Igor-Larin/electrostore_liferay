/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package electrostore.db.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the Electronic service. Represents a row in the &quot;electronics&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>electrostore.db.model.impl.ElectronicModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>electrostore.db.model.impl.ElectronicImpl</code>.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Electronic
 * @generated
 */
@ProviderType
public interface ElectronicModel extends BaseModel<Electronic> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a electronic model instance should use the {@link Electronic} interface instead.
	 */

	/**
	 * Returns the primary key of this electronic.
	 *
	 * @return the primary key of this electronic
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this electronic.
	 *
	 * @param primaryKey the primary key of this electronic
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the electronic_id of this electronic.
	 *
	 * @return the electronic_id of this electronic
	 */
	public long getElectronic_id();

	/**
	 * Sets the electronic_id of this electronic.
	 *
	 * @param electronic_id the electronic_id of this electronic
	 */
	public void setElectronic_id(long electronic_id);

	/**
	 * Returns the name of this electronic.
	 *
	 * @return the name of this electronic
	 */
	@AutoEscape
	public String getName();

	/**
	 * Sets the name of this electronic.
	 *
	 * @param name the name of this electronic
	 */
	public void setName(String name);

	/**
	 * Returns the price of this electronic.
	 *
	 * @return the price of this electronic
	 */
	public int getPrice();

	/**
	 * Sets the price of this electronic.
	 *
	 * @param price the price of this electronic
	 */
	public void setPrice(int price);

	/**
	 * Returns the electronic_count of this electronic.
	 *
	 * @return the electronic_count of this electronic
	 */
	public int getElectronic_count();

	/**
	 * Sets the electronic_count of this electronic.
	 *
	 * @param electronic_count the electronic_count of this electronic
	 */
	public void setElectronic_count(int electronic_count);

	/**
	 * Returns the is_present of this electronic.
	 *
	 * @return the is_present of this electronic
	 */
	public boolean getIs_present();

	/**
	 * Returns <code>true</code> if this electronic is is_present.
	 *
	 * @return <code>true</code> if this electronic is is_present; <code>false</code> otherwise
	 */
	public boolean isIs_present();

	/**
	 * Sets whether this electronic is is_present.
	 *
	 * @param is_present the is_present of this electronic
	 */
	public void setIs_present(boolean is_present);

	/**
	 * Returns the is_archive of this electronic.
	 *
	 * @return the is_archive of this electronic
	 */
	public boolean getIs_archive();

	/**
	 * Returns <code>true</code> if this electronic is is_archive.
	 *
	 * @return <code>true</code> if this electronic is is_archive; <code>false</code> otherwise
	 */
	public boolean isIs_archive();

	/**
	 * Sets whether this electronic is is_archive.
	 *
	 * @param is_archive the is_archive of this electronic
	 */
	public void setIs_archive(boolean is_archive);

	/**
	 * Returns the description of this electronic.
	 *
	 * @return the description of this electronic
	 */
	@AutoEscape
	public String getDescription();

	/**
	 * Sets the description of this electronic.
	 *
	 * @param description the description of this electronic
	 */
	public void setDescription(String description);

	/**
	 * Returns the electrotype_id of this electronic.
	 *
	 * @return the electrotype_id of this electronic
	 */
	public long getElectrotype_id();

	/**
	 * Sets the electrotype_id of this electronic.
	 *
	 * @param electrotype_id the electrotype_id of this electronic
	 */
	public void setElectrotype_id(long electrotype_id);

}