/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package electrostore.db.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import electrostore.db.model.Electronic;
import electrostore.db.model.ElectronicModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Electronic service. Represents a row in the &quot;electronics&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ElectronicModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ElectronicImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ElectronicImpl
 * @generated
 */
public class ElectronicModelImpl
	extends BaseModelImpl<Electronic> implements ElectronicModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a electronic model instance should use the <code>Electronic</code> interface instead.
	 */
	public static final String TABLE_NAME = "electronics";

	public static final Object[][] TABLE_COLUMNS = {
		{"electronic_id", Types.BIGINT}, {"name", Types.VARCHAR},
		{"price", Types.INTEGER}, {"electronic_count", Types.INTEGER},
		{"is_present", Types.BOOLEAN}, {"is_archive", Types.BOOLEAN},
		{"description", Types.VARCHAR}, {"electrotype_id", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("electronic_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("price", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("electronic_count", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("is_present", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("is_archive", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("electrotype_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table electronics (electronic_id LONG not null primary key,name VARCHAR(150) null,price INTEGER,electronic_count INTEGER,is_present BOOLEAN,is_archive BOOLEAN,description TEXT null,electrotype_id LONG)";

	public static final String TABLE_SQL_DROP = "drop table electronics";

	public static final String ORDER_BY_JPQL =
		" ORDER BY electronic.electronic_id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY electronics.electronic_id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ELECTROTYPE_ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ELECTRONIC_ID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ElectronicModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _electronic_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setElectronic_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _electronic_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Electronic.class;
	}

	@Override
	public String getModelClassName() {
		return Electronic.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Electronic, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Electronic, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Electronic, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Electronic)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Electronic, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Electronic, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Electronic)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Electronic, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Electronic, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Electronic, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Electronic, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Electronic, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Electronic, Object>>();
		Map<String, BiConsumer<Electronic, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Electronic, ?>>();

		attributeGetterFunctions.put(
			"electronic_id", Electronic::getElectronic_id);
		attributeSetterBiConsumers.put(
			"electronic_id",
			(BiConsumer<Electronic, Long>)Electronic::setElectronic_id);
		attributeGetterFunctions.put("name", Electronic::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Electronic, String>)Electronic::setName);
		attributeGetterFunctions.put("price", Electronic::getPrice);
		attributeSetterBiConsumers.put(
			"price", (BiConsumer<Electronic, Integer>)Electronic::setPrice);
		attributeGetterFunctions.put(
			"electronic_count", Electronic::getElectronic_count);
		attributeSetterBiConsumers.put(
			"electronic_count",
			(BiConsumer<Electronic, Integer>)Electronic::setElectronic_count);
		attributeGetterFunctions.put("is_present", Electronic::getIs_present);
		attributeSetterBiConsumers.put(
			"is_present",
			(BiConsumer<Electronic, Boolean>)Electronic::setIs_present);
		attributeGetterFunctions.put("is_archive", Electronic::getIs_archive);
		attributeSetterBiConsumers.put(
			"is_archive",
			(BiConsumer<Electronic, Boolean>)Electronic::setIs_archive);
		attributeGetterFunctions.put("description", Electronic::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<Electronic, String>)Electronic::setDescription);
		attributeGetterFunctions.put(
			"electrotype_id", Electronic::getElectrotype_id);
		attributeSetterBiConsumers.put(
			"electrotype_id",
			(BiConsumer<Electronic, Long>)Electronic::setElectrotype_id);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getElectronic_id() {
		return _electronic_id;
	}

	@Override
	public void setElectronic_id(long electronic_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_electronic_id = electronic_id;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalName() {
		return getColumnOriginalValue("name");
	}

	@Override
	public int getPrice() {
		return _price;
	}

	@Override
	public void setPrice(int price) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_price = price;
	}

	@Override
	public int getElectronic_count() {
		return _electronic_count;
	}

	@Override
	public void setElectronic_count(int electronic_count) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_electronic_count = electronic_count;
	}

	@Override
	public boolean getIs_present() {
		return _is_present;
	}

	@Override
	public boolean isIs_present() {
		return _is_present;
	}

	@Override
	public void setIs_present(boolean is_present) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_is_present = is_present;
	}

	@Override
	public boolean getIs_archive() {
		return _is_archive;
	}

	@Override
	public boolean isIs_archive() {
		return _is_archive;
	}

	@Override
	public void setIs_archive(boolean is_archive) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_is_archive = is_archive;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@Override
	public long getElectrotype_id() {
		return _electrotype_id;
	}

	@Override
	public void setElectrotype_id(long electrotype_id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_electrotype_id = electrotype_id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalElectrotype_id() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("electrotype_id"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Electronic.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Electronic toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Electronic>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ElectronicImpl electronicImpl = new ElectronicImpl();

		electronicImpl.setElectronic_id(getElectronic_id());
		electronicImpl.setName(getName());
		electronicImpl.setPrice(getPrice());
		electronicImpl.setElectronic_count(getElectronic_count());
		electronicImpl.setIs_present(isIs_present());
		electronicImpl.setIs_archive(isIs_archive());
		electronicImpl.setDescription(getDescription());
		electronicImpl.setElectrotype_id(getElectrotype_id());

		electronicImpl.resetOriginalValues();

		return electronicImpl;
	}

	@Override
	public int compareTo(Electronic electronic) {
		long primaryKey = electronic.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Electronic)) {
			return false;
		}

		Electronic electronic = (Electronic)object;

		long primaryKey = electronic.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Electronic> toCacheModel() {
		ElectronicCacheModel electronicCacheModel = new ElectronicCacheModel();

		electronicCacheModel.electronic_id = getElectronic_id();

		electronicCacheModel.name = getName();

		String name = electronicCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			electronicCacheModel.name = null;
		}

		electronicCacheModel.price = getPrice();

		electronicCacheModel.electronic_count = getElectronic_count();

		electronicCacheModel.is_present = isIs_present();

		electronicCacheModel.is_archive = isIs_archive();

		electronicCacheModel.description = getDescription();

		String description = electronicCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			electronicCacheModel.description = null;
		}

		electronicCacheModel.electrotype_id = getElectrotype_id();

		return electronicCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Electronic, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Electronic, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Electronic, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Electronic)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Electronic, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Electronic, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Electronic, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Electronic)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Electronic>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Electronic.class, ModelWrapper.class);

	}

	private long _electronic_id;
	private String _name;
	private int _price;
	private int _electronic_count;
	private boolean _is_present;
	private boolean _is_archive;
	private String _description;
	private long _electrotype_id;

	public <T> T getColumnValue(String columnName) {
		Function<Electronic, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Electronic)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("electronic_id", _electronic_id);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("price", _price);
		_columnOriginalValues.put("electronic_count", _electronic_count);
		_columnOriginalValues.put("is_present", _is_present);
		_columnOriginalValues.put("is_archive", _is_archive);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("electrotype_id", _electrotype_id);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("electronic_id", 1L);

		columnBitmasks.put("name", 2L);

		columnBitmasks.put("price", 4L);

		columnBitmasks.put("electronic_count", 8L);

		columnBitmasks.put("is_present", 16L);

		columnBitmasks.put("is_archive", 32L);

		columnBitmasks.put("description", 64L);

		columnBitmasks.put("electrotype_id", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Electronic _escapedModel;

}